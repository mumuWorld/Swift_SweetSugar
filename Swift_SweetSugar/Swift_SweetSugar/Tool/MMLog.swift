//
//  MMLog.swift
//  Swift_SweetSugar
//
//  Created by Êù®Êù∞ on 2025/4/25.
//  Copyright ¬© 2025 Mumu. All rights reserved.
//

import Foundation

struct SDKLaunchLog: Codable {
    let timestamp: Date      // ËÆ∞ÂΩïÊó∂Èó¥
    let info: String         // ËØ¥Êòé‰ø°ÊÅØÔºå‰æãÂ¶Ç ‚ÄúÂàùÂßãÂåñÊàêÂäü‚Äù
}

class SDKLogManager {
    static let shared = SDKLogManager()
    
    /// Áî®‰∫éËØªÂÜôÊó•ÂøóÁöÑ‰∏≤Ë°åÈòüÂàó
    private let queue = DispatchQueue(label: "com.yourcompany.SDKLogQueue", qos: .utility)
    
    private var logs: [SDKLaunchLog] = []
    private let logFileURL: URL
    
    private init() {
        // ÊûÑÂª∫Êó•ÂøóÊñá‰ª∂Ë∑ØÂæÑÔºàÊ≤ôÁõí Documents/SDKLogs.jsonÔºâ
        let documentDir = FileManager.default.urls(for: .documentDirectory, in: .userDomainMask).first!
        logFileURL = documentDir.appendingPathComponent("SDKLogs.txt")
        
//        loadLogsFromDisk()
        // Ê∑ªÂä†ÂêØÂä®ÂàÜÂâ≤Á∫ø
        addLog(info: "===== üöÄ SDK ÂêØÂä® @ \(formattedDate(Date())) =====")
    }
    
    private func formattedDate(_ date: Date) -> String {
        let formatter = DateFormatter()
        formatter.dateFormat = "yyyy-MM-dd HH:mm:ss"
        return formatter.string(from: date)
    }
    
    func addLog(info: String) {
        queue.async {
            let log = SDKLaunchLog(timestamp: Date(), info: info)
            self.logs.append(log)
            self.saveLogsToDisk()
        }
    }
    
    func allLogs(completion: @escaping ([SDKLaunchLog]) -> Void) {
        queue.async {
            completion(self.logs)
        }
    }
    
    // MARK: - ÁßÅÊúâÊñπÊ≥ï
    
    private func loadLogsFromDisk() {
        queue.sync {
            guard FileManager.default.fileExists(atPath: logFileURL.path) else { return }
            do {
                let data = try Data(contentsOf: logFileURL)
                logs = try JSONDecoder().decode([SDKLaunchLog].self, from: data)
            } catch {
                print("‚ùå Failed to load logs: \(error)")
            }
        }
    }
    
    private func saveLogsToDisk() {
        do {
            let data = try JSONEncoder().encode(self.logs)
            try data.write(to: logFileURL)
        } catch {
            print("‚ùå Failed to save logs: \(error)")
        }
    }
}
